package com.funstill.generator.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.funstill.generator.greendao.entity.MessageData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_DATA".
*/
public class MessageDataDao extends AbstractDao<MessageData, Long> {

    public static final String TABLENAME = "MESSAGE_DATA";

    /**
     * Properties of entity MessageData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property SenderId = new Property(2, Long.class, "senderId", false, "SENDER_ID");
        public final static Property ReceiverId = new Property(3, Long.class, "receiverId", false, "RECEIVER_ID");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property MsgType = new Property(5, Integer.class, "msgType", false, "MSG_TYPE");
        public final static Property DialogId = new Property(6, Long.class, "dialogId", false, "DIALOG_ID");
        public final static Property CreateDate = new Property(7, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(8, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
    }


    public MessageDataDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UUID\" TEXT," + // 1: uuid
                "\"SENDER_ID\" INTEGER NOT NULL ," + // 2: senderId
                "\"RECEIVER_ID\" INTEGER NOT NULL ," + // 3: receiverId
                "\"CONTENT\" TEXT," + // 4: content
                "\"MSG_TYPE\" INTEGER," + // 5: msgType
                "\"DIALOG_ID\" INTEGER NOT NULL ," + // 6: dialogId
                "\"CREATE_DATE\" INTEGER," + // 7: createDate
                "\"UPDATE_DATE\" INTEGER);"); // 8: updateDate
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MESSAGE_DATA_UUID ON \"MESSAGE_DATA\"" +
                " (\"UUID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
        stmt.bindLong(3, entity.getSenderId());
        stmt.bindLong(4, entity.getReceiverId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        Integer msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(6, msgType);
        }
        stmt.bindLong(7, entity.getDialogId());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(8, createDate.getTime());
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(9, updateDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
        stmt.bindLong(3, entity.getSenderId());
        stmt.bindLong(4, entity.getReceiverId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        Integer msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(6, msgType);
        }
        stmt.bindLong(7, entity.getDialogId());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(8, createDate.getTime());
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(9, updateDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageData readEntity(Cursor cursor, int offset) {
        MessageData entity = new MessageData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.getLong(offset + 2), // senderId
            cursor.getLong(offset + 3), // receiverId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // msgType
            cursor.getLong(offset + 6), // dialogId
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // createDate
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // updateDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSenderId(cursor.getLong(offset + 2));
        entity.setReceiverId(cursor.getLong(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsgType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDialogId(cursor.getLong(offset + 6));
        entity.setCreateDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUpdateDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
